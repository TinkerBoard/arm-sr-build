From 8634d1058d40612f604900fa070b64d359475a1c Mon Sep 17 00:00:00 2001
From: abc <abc@xyz.com>
Date: Wed, 30 Jun 2021 19:42:15 +0530
Subject: [PATCH] DFU Update

---
 board/rockchip/evb_rk3399/evb-rk3399.c | 74 ++++++++++++++++++++++++++
 lib/efi_loader/efi_capsule.c           |  2 +
 2 files changed, 76 insertions(+)

diff --git a/board/rockchip/evb_rk3399/evb-rk3399.c b/board/rockchip/evb_rk3399/evb-rk3399.c
index abb76585cf..d937878755 100644
--- a/board/rockchip/evb_rk3399/evb-rk3399.c
+++ b/board/rockchip/evb_rk3399/evb-rk3399.c
@@ -10,6 +10,14 @@
 #include <asm/arch-rockchip/periph.h>
 #include <power/regulator.h>
 
+#include <blk.h>
+#include <dfu.h>
+#include <env.h>
+#include <memalign.h>
+#include <misc.h>
+#include <mtd.h>
+#include <mtd_node.h>
+
 #ifndef CONFIG_SPL_BUILD
 int board_early_init_f(void)
 {
@@ -30,3 +38,69 @@ out:
 	return 0;
 }
 #endif
+
+
+
+//ARMSR - ALT_INFO Macro Function below added for DFU_ALT_INFO 
+
+#ifdef CONFIG_SET_DFU_ALT_INFO
+
+#define CONFIG_DFU_ALT_BOOT_SD \
+	"mmc 1=idbloader-img raw 0x40 0x2000;u-boot-itb raw 0x4000 0x2000"
+	
+#define CONFIG_DFU_ALT_BOOT_EMMC \
+	"mmc 0=idbloader-img raw 0x40 0x2000;u-boot-itb raw 0x4000 0x2000"	
+
+char *get_dfu_alt_boot(char *interface, char *devstr)
+{
+	char *alt_boot;
+
+ 	//struct mmc *mmc;
+	int dev_num;
+	
+	alt_boot = env_get("dfu_alt_boot");
+	dev_num = simple_strtoul(devstr, NULL, 10);
+	
+	if (alt_boot==NULL){
+	printf("ARMSR: %d: %s: %s:\n", __LINE__ , __FILE__ ,  __func__); //ARMSR
+	
+	alt_boot = CONFIG_DFU_ALT_BOOT_EMMC;
+	
+	}
+
+	printf("ARMSR: %d: %s: %s: %s:\n", __LINE__ , __FILE__ ,  __func__, alt_boot ); //ARMSR
+	return alt_boot;	
+ 	
+}
+#endif
+
+#ifdef CONFIG_SET_DFU_ALT_INFO
+#define CONFIG_SET_DFU_ALT_BUF_LEN (SZ_1K)
+void set_dfu_alt_info(char *interface, char *devstr)
+{
+	size_t buf_size = CONFIG_SET_DFU_ALT_BUF_LEN;
+	ALLOC_CACHE_ALIGN_BUFFER(char, buf, buf_size);
+	char *alt_info = "Settings not found!";
+	char *status = "error!\n";
+	char *alt_setting;
+
+	int offset = 0;
+
+	//puts("DFU alt info setting: ");
+	//printf("ARMSR: %d: %s: %s: %s:\n", __LINE__ , __FILE__ ,  __func__, alt_info ); //ARMSR
+	alt_setting = get_dfu_alt_boot(interface, devstr);
+	if (alt_setting) {
+		env_set("dfu_alt_boot", alt_setting);
+		offset = snprintf(buf, buf_size, "%s", alt_setting);
+	}
+
+	if (offset) {
+		alt_info = buf;
+		status = "done\n";
+	}
+
+	env_set("dfu_alt_info", alt_info);//ARMSR
+	printf("ARMSR: %d: %s: %s: %s:\n", __LINE__ , __FILE__ ,  __func__, alt_info ); //ARMSR
+	//puts(status);
+}
+#endif
diff --git a/lib/efi_loader/efi_capsule.c b/lib/efi_loader/efi_capsule.c
index 6ee883d5b1..7bedd1b91a 100644
--- a/lib/efi_loader/efi_capsule.c
+++ b/lib/efi_loader/efi_capsule.c
@@ -642,6 +642,8 @@ static efi_status_t find_boot_device(void)
 		ret = get_dp_device(boot_var16, &boot_dev);
 		if (ret == EFI_SUCCESS) {
 			if (device_is_present_and_system_part(boot_dev)) {
+			/*ARMSR If device is present retrieveing the file node before exiting*/
+				bootdev_root=efi_file_from_path(boot_dev); 
 				goto out;
 			} else {
 				efi_free_pool(boot_dev);
-- 
2.25.1

